buildscript {
    ext.kotlin_version = '1.0.3'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.8.0"
    }
}

apply plugin: 'io.codearte.nexus-staging'

nexusStaging {
    username = project.hasProperty('de_publish_username') ? project.de_publish_username : ''
    password = project.hasProperty('de_publish_password') ? project.de_publish_password : ''
    packageGroup = "eu.xenit"
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'maven'
    apply plugin: 'signing'

    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    artifacts {
        archives sourceJar, javadocJar
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                signing {
                    required {false}
                    sign configurations.archives
                }
                beforeDeployment {
                    MavenDeployment deployment ->
                        
                        signing.signPom(deployment)

                }

                repository(url: project.hasProperty('de_publish_url') ? project.de_publish_url : "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: project.hasProperty('de_publish_username') ? project.de_publish_username : '', password: project.hasProperty('de_publish_password') ? project.de_publish_password : '')
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: project.hasProperty('de_publish_username') ? project.de_publish_username : '', password: project.hasProperty('de_publish_password') ? project.de_publish_password : '')
                }

                pom.project {
                    url 'https://github.com/xenit-eu/dynamic-extensions-for-alfresco'
                    name "dynamic-extensions-for-alfresco-" + project.name
                    description "Adds an OSGi container to alfresco repository supporting dynamic code reloading, " +
                            "classpath isolation and a bunch of other useful features"

                    scm {
                        connection 'scm:git:git@github.com:xenit-eu/dynamic-extensions-for-alfresco.git'
                        developerConnection 'scm:git:git@github.com:xenit-eu/dynamic-extensions-for-alfresco.git'
                        url 'https://github.com/xenit-eu/dynamic-extensions-for-alfresco.git'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer{
                            id "laurentvdl"
                            name "Laurent Van der Linden"
                            roles{
                                role "Founder"
                                role "Architect"
                            }
                        }
                        developer {
                            id 'stanmine'
                            name 'Stan Mine'
                            email 'stan.mine@xenit.eu'
                            roles{
                                role "Architect"
                                role "Developer"
                            }
                        }
                        developer {
                            id 'yregaieg'
                            name 'Younes Regaieg'
                            email 'younes.regaieg@xenit.eu'
                            roles{
                                role "Contributor"
                            }
                        }
                    }
                }
            }
        }
    }

    [compileJava, compileTestJava,javadoc]*.options*.encoding = 'UTF-8'

    compileJava {
        sourceCompatibility = 1.7
        targetCompatibility = 1.7
        options.compilerArgs << '-Xlint:unchecked'
    }

    ext {
        alfrescoVersion = '5.2.g'
        springWebscripts = '6.13'
        springVersion = '4.1.8.RELEASE'
        geminiVersion = '1.0.2.RELEASE'
        slf4jVersion = '1.7.5'
        osgiVersion = '4.3.1'
        junitVersion = '4.12'
        transactionApiVersion = '1.1'
        felixVersion = '4.2.1'
        springOsgiUtilVersion = '2.0.5.RELEASE'
        mockitoVersion = '1.10.19'
        jibxVersion = '1.2.3'
        hibernateVersion = '3.2.6.ga'
        servletVersion = '2.5'
        bndVersion = '2.4.1'
    }

    buildscript {
      repositories {
          mavenCentral()
      }
      dependencies {
          classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
      }
    }

    repositories {
        mavenCentral()
        maven {
            url "https://artifacts.alfresco.com/nexus/content/groups/public/"
        }
        jcenter()
        maven {
            url "http://repository.springsource.com/maven/bundles/release"
        }
        maven {
            url "http://repository.springsource.com/maven/bundles/external"
        }
    }

    group = 'eu.xenit.de'
    version = '1.7.0-SNAPSHOT'

    configurations.all {
        exclude group: 'jaxen'
    }

    configurations {
        amp
        compile.extendsFrom(amp)
    }

    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(uploadArchives)) {
            if (!project.hasProperty('keyId') || !project.hasProperty('secretKeyRingFile') || !project.hasProperty('password')){
                throw new GradleException('You need to provide signing params in order to sign artifacts')
            }

            def id = project.hasProperty('keyId') ? project.keyId : ''
            def file = project.hasProperty('secretKeyRingFile') ? project.secretKeyRingFile : ''
            def password = project.hasProperty('password') ? project.password : ''

            ext."signing.keyId" = id
            ext."signing.secretKeyRingFile" = file
            ext."signing.password" = password
        }
    }

}

task wrapper(type: Wrapper) {
    gradleVersion = '4.2.1'
}

defaultTasks 'build'
