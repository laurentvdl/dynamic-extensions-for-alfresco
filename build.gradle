buildscript {
    ext.jetbrains_annotations_version = '17.0.0'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.8.0"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7"
    }
}

plugins {
    id "biz.aQute.bnd.builder" version "4.2.0" apply false
    id "org.sonarqube" version "2.8"
}

apply from: "${rootProject.projectDir}/gradle/versions.gradle"
apply plugin: 'io.codearte.nexus-staging'

nexusStaging {
    username = project.hasProperty('de_publish_username') ? project.de_publish_username : ''
    password = project.hasProperty('de_publish_password') ? project.de_publish_password : ''
    packageGroup = "eu.xenit"
}

allprojects {
    group = 'eu.xenit.de'
    version = '2.0.6'

    boolean isRelease = System.env.BRANCH_NAME?.startsWith("release")
    if (!isRelease)
        version += "-SNAPSHOT"

    apply plugin: 'idea'
    apply plugin: 'eclipse'

    project.pluginManager.withPlugin('java-base') {
        project.sourceCompatibility = 1.8
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.compilerArgs << '-Xlint:unchecked'
    }

    repositories {
        maven {
            url "${rootProject.projectDir}/alfresco-bom-repo"
        }
        mavenCentral()
        maven {
            url "https://artifacts.alfresco.com/nexus/content/groups/public/"
        }
        jcenter()
        maven {
            url "http://repository.springsource.com/maven/bundles/release"
        }
        maven {
            url "http://repository.springsource.com/maven/bundles/external"
        }
    }
}

def getSimpleAlfrescoVersionFromProjectName(final String projectName) {
    for (final String shortVersion : alfrescoVersions.keySet()) {
        if (projectName.endsWith(shortVersion)) {
            // Subproject for a specific Alfresco version
            return shortVersion;
        }
    }
    // Return a default version for project that require an Alfresco dependency for javadoc only
    return "50";

}

subprojects {
    if (project.name == 'integration-tests'
        || project.parent.name == 'integration-tests'
        || project.name == 'blueprint-integration'
        || project.name == 'polyfill'
        || project.parent.name == 'polyfill') {
        return
    }

    ext {
        simpleAlfrescoVersion = getSimpleAlfrescoVersionFromProjectName(project.name)
        alfrescoVersion = alfrescoVersions.get(simpleAlfrescoVersion)
        springVersion = springVersions.get(simpleAlfrescoVersion)

        alfrescoBom = "eu.xenit.alfresco:alfresco-community-bom:${alfrescoVersion}"

        // '3.0.0.M01' for Alfresco 6.0
        // '1.0.2.RELEASE' for Alfresco 5.x
        geminiVersion = geminiVersions.get(simpleAlfrescoVersion)

        osgiVersion = '6.0.0'
        felixVersion = '6.0.3'

        slf4jVersion = '1.7.7'
        junitVersion = '4.12'

        springOsgiUtilVersion = '2.0.5.RELEASE'
        mockitoVersion = '1.10.19'
        jibxVersion = '1.2.3'
        hibernateVersion = '3.2.6.ga'
        servletVersion = '2.5'
        bndVersion = '2.4.1'

        javaxAnnotationApiVersion = '1.3.2'
        jaxbApiVersion = '2.3.0'
    }

    if (project.name == 'alfresco-dynamic-extensions-repo' || project.parent.name == 'alfresco-dynamic-extensions-repo'
        || project.name == 'gradle-plugin') {
        return
    }

    apply plugin: 'java'
    apply plugin: 'jacoco'

    task sourceJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    apply from: "${rootProject.projectDir}/publish.gradle"

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourceJar
                artifact javadocJar
            }
        }
    }
}

defaultTasks 'build'

ext.versionFile = "${project.buildDir}/version"

task makeVersionFile {
    group "build"
    description "Make a file containing the version"
    outputs.file versionFile

    doLast {
        file(versionFile).write version
        println "Version ${version}"
    }
}

allprojects {
    configurations.all {
        exclude group: 'jaxen'
        resolutionStrategy {
            eachDependency { DependencyResolveDetails details ->

                if (details.requested.group == 'org.alfresco.surf') {
                    if (project.alfrescoVersion.startsWith('5.0')) {
                        details.useTarget group: 'org.springframework.extensions.surf',
                                name: details.requested.name,
                                version: project.alfrescoVersion
                        details.because "'org.springframework.extensions.surf' was moved to 'org.alfresco.surf'"
                    }
                }

                // Eclipse Gemini Blueprint 1.0.2.RELEASE was published as 'org.eclipse.gemini' and is
                // the last version that supports Spring 3.x
                // Starting from 2.0 the modules were moved to 'org.eclipse.gemini.blueprint' and artifacts
                // were renamed.
                if (details.requested.group == 'org.eclipse.gemini.blueprint'
                        && details.requested.version.startsWith('1.0')) {
                    if (details.requested.name == 'gemini-blueprint-extender') {
                        details.useTarget group: 'org.eclipse.gemini',
                                name: 'org.eclipse.gemini.blueprint.extender',
                                version: details.requested.version
                    } else if (details.requested.name == 'gemini-blueprint-core') {
                        details.useTarget group: 'org.eclipse.gemini',
                                name: 'org.eclipse.gemini.blueprint.core',
                                version: details.requested.version
                    } else if (details.requested.name == 'gemini-blueprint-io') {
                        details.useTarget group: 'org.eclipse.gemini',
                                name: 'org.eclipse.gemini.blueprint.io',
                                version: details.requested.version
                    } else {
                        throw new GradleException("No module substitution mapping found for ${details.requested}")
                    }
                    details.because "'org.eclipse.gemini.blueprint' was 'org.eclipse.gemini' in the 1.x version range"
                }

            }
        }
    }
}