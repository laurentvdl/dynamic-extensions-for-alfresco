package nl.runnable.alfresco.gradle

import org.gradle.api.*
import org.gradle.tooling.BuildException


/**
 * Gradle plugin that configures build settings for an Alfresco Dynamic Extension.
 * 
 * @author Laurens Fridael
 *
 */
class DynamicExtensionPlugin implements Plugin<Project> {

	@Override
	void apply(Project project) {
		configurePlugins(project)
		configureExtensions(project)
		configureInstallBundleTask(project)
		project.afterEvaluate {
			configureDependencies(project)
			configureRepositories(project)
			configureJarManifest(project)
		}
	}

	void configurePlugins(Project project) {
		project.apply plugin: "java"
		project.apply plugin: "osgi"
	}

	void configureExtensions(Project project) {
		project.convention.plugins[ProjectConvention.class.name] = new ProjectConvention(project)
		project.extensions.create("bundle", BundleExtension)
		project.ext.username = project.has('username') ? project.username : null
		project.ext.password = project.has('password') ? project.password : null
	}

	void configureInstallBundleTask(Project project) {
		def task = project.tasks.create("installBundle")
		task.dependsOn("build")
		task.ext.installInDirectory = false
		task.ext.installInRepository = false
		task.ext.repository = [:] << Endpoint.DEFAULTS
		task.doFirst {
			if (installInDirectory) {
				File dir = new java.io.File(directory)
				if (!dir.exists()) {
					throw new BuildException("Directory '$directory' does not exist.", null)
					logger.error()
				} else if (!dir.isDirectory()) {
					throw new BuildException("'$directory' is not a directory", null)
				}
			}
		}
		task << {
			if (installInDirectory) {
				project.copy {
					from project.jar.archivePath
					into directory
				}
			}
			if (installInRepository) {
				BundleService bundleService = new BundleService()
				bundleService.client.with {
					endpoint.host = repository.host
					endpoint.port = repository.port
					endpoint.servicePath = repository.servicePath
					authentication.username = repository.username
					authentication.password = repository.password
				}
				try {
					def response = bundleService.installBundle project.jar.archivePath
					project.logger.info response.message
					project.logger.info "Bundle ID: ${response.bundleId}"
				} catch (RestClientException e) {
					if (e.status.code == 401) {
						throw new BuildException("User not authorized to install bundles in repository. " + 
							"Make sure you specify the correct username and password for an admin-level account.", e)
					} else {
						throw e 
					}
				}
			}
		}
	}

	void configureDependencies(Project project) {
		def alfresco = [
			group: project.alfresco.group ?: "org.alfresco",
			version: project.alfresco.version ?: Versions.ALFRESCO
		]
		def surf = [
			group: project.surf.group ?: "org.springframework.extensions.surf",
			version: project.surf.version ?: Versions.SURF
		]
		def dynamicExtensions = [
			group: project.dynamicExtensions.group ?: "nl.runnable.alfresco.dynamicextensions",
			version: project.dynamicExtensions.version ?: Versions.DYNAMIC_EXTENSIONS
		]
		project.dependencies {
			compile group: alfresco.group, name: "alfresco-core", version: alfresco.version
			compile group: alfresco.group, name: "alfresco-repository", version: alfresco.version
			compile group: alfresco.group, name: "alfresco-data-model", version: alfresco.version
			compile group: surf.group, name: "spring-webscripts", version: surf.version
			compile group: dynamicExtensions.group, name: "annotations", version: dynamicExtensions.version
		}

		if (project.useJavaxAnnotations) {
			project.dependencies {
				compile group:"javax.inject", name: "javax.inject", version: "1"
				compile group: "org.apache.geronimo.specs", name: "geronimo-annotation_1.1_spec", version: "1.0.1"
			}
		}
	}

	void configureJarManifest(Project project) {
		/* 
		 * These packages must be imported for code that uses CGLIB or Spring AOP. For the sake of convenience, this
		 * plugin preemptively adds these imports.  
		 * 
		 * Without these imports, you will get ClassNotFoundExceptions when using CGLIB proxies (generated by Spring)
		 * for classes that are loaded within the OSGi container.
		 * 
		 * BND will not be able to detect the use of CGLIB and Spring AOP classes at build-time, hence these packages 
		 * must be specified manually.
		 */
		def additionalPackages = [
			"net.sf.cglib.core",
			"net.sf.cglib.proxy",
			"net.sf.cglib.reflect",
			"org.aopalliance.aop",
			"org.aopalliance.intercept",
			"org.springframework.aop",
			"org.springframework.aop.framework"
		]
		project.jar {
			manifest {
				instructionReplace "Bundle-SymbolicName", (project.bundle.symbolicName ?: project.name)
				instructionReplace "Bundle-Name", (project.bundle.name ?: project.name)
				instructionReplace "Bundle-Description", (project.bundle.description ?: project.description)
				instruction "Alfresco-Dynamic-Extension", "true"
				instruction "Import-Package", "*," + additionalPackages.join(",")
			}
		}
	}

	void configureRepositories(Project project) {
		project.repositories {
			mavenCentral()
			maven { url "https://artifacts.alfresco.com/nexus/content/groups/public" }
			maven { url "http://repo.springsource.org/release" }
			maven { url "https://raw.github.com/lfridael/dynamic-extensions-for-alfresco/mvn-repo/" }
		}
	}
}

class ProjectConvention {

	Project project
	def alfresco = [:]
	def surf = [:]
	def dynamicExtensions = [:]
	boolean useJavaxAnnotations = true

	ProjectConvention(Project project) {
		this.project = project
	}

	void useAlfrescoVersion(String version) {
		project.alfresco.version = version
	}

	void useDynamicExtensionsVersion(String version) {
		project.dynamicExtensions.version = version
	}

	void useSurfVersion(String version) {
		project.surf.version = version
	}

	void useJavaxAnnotations(boolean useJavaxAnnotations = true) {
		project.useJavaxAnnotations = useJavaxAnnotations
	}

	Task getInstallBundle() {
		project.tasks["installBundle"]
	}
	
	void toDirectory(String directory) {
		installBundle.ext.with {
			if (installInRepository) {
				throw new BuildException("Cannot use toDirectory() and toRepository() simultaneously.");
			}
			directory = directory
			installInDirectory = true
		}
	}

	void toRepository(Map options) {
		installBundle.ext.with {
			if (installInDirectory) {
				throw new BuildException("Cannot use toDirectory() and toRepository() simultaneously.");
			}
			repository << options
			installInRepository = true
		}
	}

}

class BundleExtension {

	String symbolicName
	String name
	String description
	
}
